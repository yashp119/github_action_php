name: Build, SonarQube Scan, and Email

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v2
        with:
          name: sonarqube-report
          path: .scannerwork/report-task.txt

  main:
    name: Create PR Release to Main
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}

      - name: Wait for PR Approval
        id: wait_for_approval
        run: |
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          approvals=$(curl -s -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number}/reviews" | jq '.[] | select(.state == "APPROVED")')

          if [ -n "$approvals" ]; then
            echo "Waiting for PR approval"
            exit 1
          fi

      - name: Add Reviewer
        id: add_reviewer
        run: |
          response=$(curl -X POST \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/requested_reviewers" \
            -d '{
                  "reviewers": ["triniha"]
                }')
          echo "::set-output name=response::${response}"

  email:
    name: Send SonarQube Report via Email
    runs-on: ubuntu-latest
    needs: [main, build]
    if: needs.main.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download SonarQube Report Artifact
        uses: actions/download-artifact@v2
        with:
          name: sonarqube-report

      - name: Fetch SonarQube Issues
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=testing-sonar&resolved=false" \
            -o sonarqube-issues.json
          
      - name: Convert SonarQube Report to HTML
        run: |
          echo '<html><body>' > sonarqube-issues.html
          jq -r '.issues[] | "<p>Issue: " + .message + "</p><p>Severity: " + .severity + "</p><p>Component: " + .component + "</p><p>Rule: " + .rule + "</p>"' sonarqube-issues.json >> sonarqube-issues.html
          echo '</body></html>' >> sonarqube-issues.html

      - name: Send SonarQube Report via Email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: SonarQube Report
          body: sonarqube-issues.html
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          attachments: sonarqube-issues.json
          content_type: text/html
